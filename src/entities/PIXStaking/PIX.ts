// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CombinePriceUpdated extends ethereum.Event {
  get params(): CombinePriceUpdated__Params {
    return new CombinePriceUpdated__Params(this);
  }
}

export class CombinePriceUpdated__Params {
  _event: CombinePriceUpdated;

  constructor(event: CombinePriceUpdated) {
    this._event = event;
  }

  get price(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Combined extends ethereum.Event {
  get params(): Combined__Params {
    return new Combined__Params(this);
  }
}

export class Combined__Params {
  _event: Combined;

  constructor(event: Combined) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get category(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get size(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class ModeratorUpdated extends ethereum.Event {
  get params(): ModeratorUpdated__Params {
    return new ModeratorUpdated__Params(this);
  }
}

export class ModeratorUpdated__Params {
  _event: ModeratorUpdated;

  constructor(event: ModeratorUpdated) {
    this._event = event;
  }

  get moderator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PIXMinted extends ethereum.Event {
  get params(): PIXMinted__Params {
    return new PIXMinted__Params(this);
  }
}

export class PIXMinted__Params {
  _event: PIXMinted;

  constructor(event: PIXMinted) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get pixId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get category(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get size(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class PackPriceUpdated extends ethereum.Event {
  get params(): PackPriceUpdated__Params {
    return new PackPriceUpdated__Params(this);
  }
}

export class PackPriceUpdated__Params {
  _event: PackPriceUpdated;

  constructor(event: PackPriceUpdated) {
    this._event = event;
  }

  get mode(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaymentTokenUpdated extends ethereum.Event {
  get params(): PaymentTokenUpdated__Params {
    return new PaymentTokenUpdated__Params(this);
  }
}

export class PaymentTokenUpdated__Params {
  _event: PaymentTokenUpdated;

  constructor(event: PaymentTokenUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Requested extends ethereum.Event {
  get params(): Requested__Params {
    return new Requested__Params(this);
  }
}

export class Requested__Params {
  _event: Requested;

  constructor(event: Requested) {
    this._event = event;
  }

  get dropId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get playerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get mode(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Requested1 extends ethereum.Event {
  get params(): Requested1__Params {
    return new Requested1__Params(this);
  }
}

export class Requested1__Params {
  _event: Requested1;

  constructor(event: Requested1) {
    this._event = event;
  }

  get dropId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get playerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get mode(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get purchasedPacks(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get count(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TraderUpdated extends ethereum.Event {
  get params(): TraderUpdated__Params {
    return new TraderUpdated__Params(this);
  }
}

export class TraderUpdated__Params {
  _event: TraderUpdated;

  constructor(event: TraderUpdated) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TreasuryUpdated extends ethereum.Event {
  get params(): TreasuryUpdated__Params {
    return new TreasuryUpdated__Params(this);
  }
}

export class TreasuryUpdated__Params {
  _event: TreasuryUpdated;

  constructor(event: TreasuryUpdated) {
    this._event = event;
  }

  get treasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PIX__dropInfosResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class PIX__packRequestsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PIX__pixInfosResult {
  value0: BigInt;
  value1: i32;
  value2: i32;

  constructor(value0: BigInt, value1: i32, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }
}

export class PIX__treasuryResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PIX extends ethereum.SmartContract {
  static bind(address: Address): PIX {
    return new PIX("PIX", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blacklistedAddresses(param0: Address): boolean {
    let result = super.call(
      "blacklistedAddresses",
      "blacklistedAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_blacklistedAddresses(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "blacklistedAddresses",
      "blacklistedAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  combineCounts(param0: i32): i32 {
    let result = super.call("combineCounts", "combineCounts(uint8):(uint16)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toI32();
  }

  try_combineCounts(param0: i32): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "combineCounts",
      "combineCounts(uint8):(uint16)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  combinePrice(): BigInt {
    let result = super.call("combinePrice", "combinePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_combinePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("combinePrice", "combinePrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dropInfos(param0: BigInt): PIX__dropInfosResult {
    let result = super.call(
      "dropInfos",
      "dropInfos(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PIX__dropInfosResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_dropInfos(param0: BigInt): ethereum.CallResult<PIX__dropInfosResult> {
    let result = super.tryCall(
      "dropInfos",
      "dropInfos(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PIX__dropInfosResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDisabledDropForPlayer(playerId: BigInt, dropId: BigInt): boolean {
    let result = super.call(
      "isDisabledDropForPlayer",
      "isDisabledDropForPlayer(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(playerId),
        ethereum.Value.fromUnsignedBigInt(dropId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isDisabledDropForPlayer(
    playerId: BigInt,
    dropId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDisabledDropForPlayer",
      "isDisabledDropForPlayer(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(playerId),
        ethereum.Value.fromUnsignedBigInt(dropId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTerritory(tokenId: BigInt): boolean {
    let result = super.call("isTerritory", "isTerritory(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isTerritory(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isTerritory", "isTerritory(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTokenId(): BigInt {
    let result = super.call("lastTokenId", "lastTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastTokenId", "lastTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  limitForMedium(): BigInt {
    let result = super.call("limitForMedium", "limitForMedium():(uint256)", []);

    return result[0].toBigInt();
  }

  try_limitForMedium(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "limitForMedium",
      "limitForMedium():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  limitForSmall(): BigInt {
    let result = super.call("limitForSmall", "limitForSmall():(uint256)", []);

    return result[0].toBigInt();
  }

  try_limitForSmall(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "limitForSmall",
      "limitForSmall():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  moderators(param0: Address): boolean {
    let result = super.call("moderators", "moderators(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_moderators(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("moderators", "moderators(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  oracleManager(): Address {
    let result = super.call("oracleManager", "oracleManager():(address)", []);

    return result[0].toAddress();
  }

  try_oracleManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleManager",
      "oracleManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  packIXTPrices(param0: BigInt): BigInt {
    let result = super.call(
      "packIXTPrices",
      "packIXTPrices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_packIXTPrices(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "packIXTPrices",
      "packIXTPrices(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  packPrices(param0: BigInt): BigInt {
    let result = super.call("packPrices", "packPrices(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_packPrices(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("packPrices", "packPrices(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  packRequestCounts(param0: Address): BigInt {
    let result = super.call(
      "packRequestCounts",
      "packRequestCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_packRequestCounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "packRequestCounts",
      "packRequestCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  packRequests(param0: Address): PIX__packRequestsResult {
    let result = super.call(
      "packRequests",
      "packRequests(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PIX__packRequestsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_packRequests(
    param0: Address
  ): ethereum.CallResult<PIX__packRequestsResult> {
    let result = super.tryCall(
      "packRequests",
      "packRequests(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PIX__packRequestsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  packsPurchased(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "packsPurchased",
      "packsPurchased(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_packsPurchased(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "packsPurchased",
      "packsPurchased(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentTokens(param0: Address): boolean {
    let result = super.call("paymentTokens", "paymentTokens(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_paymentTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "paymentTokens",
      "paymentTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingPackDropId(param0: Address): BigInt {
    let result = super.call(
      "pendingPackDropId",
      "pendingPackDropId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_pendingPackDropId(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingPackDropId",
      "pendingPackDropId(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingPackType(param0: Address): BigInt {
    let result = super.call(
      "pendingPackType",
      "pendingPackType(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_pendingPackType(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pendingPackType",
      "pendingPackType(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pixInLand(param0: boolean, param1: BigInt): boolean {
    let result = super.call("pixInLand", "pixInLand(bool,uint256):(bool)", [
      ethereum.Value.fromBoolean(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);

    return result[0].toBoolean();
  }

  try_pixInLand(param0: boolean, param1: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("pixInLand", "pixInLand(bool,uint256):(bool)", [
      ethereum.Value.fromBoolean(param0),
      ethereum.Value.fromUnsignedBigInt(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pixInfos(param0: BigInt): PIX__pixInfosResult {
    let result = super.call(
      "pixInfos",
      "pixInfos(uint256):(uint256,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PIX__pixInfosResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32()
    );
  }

  try_pixInfos(param0: BigInt): ethereum.CallResult<PIX__pixInfosResult> {
    let result = super.tryCall(
      "pixInfos",
      "pixInfos(uint256):(uint256,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PIX__pixInfosResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32()
      )
    );
  }

  pixToken(): Address {
    let result = super.call("pixToken", "pixToken():(address)", []);

    return result[0].toAddress();
  }

  try_pixToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("pixToken", "pixToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pixesInLand(tokenIds: Array<BigInt>): boolean {
    let result = super.call("pixesInLand", "pixesInLand(uint256[]):(bool)", [
      ethereum.Value.fromUnsignedBigIntArray(tokenIds)
    ]);

    return result[0].toBoolean();
  }

  try_pixesInLand(tokenIds: Array<BigInt>): ethereum.CallResult<boolean> {
    let result = super.tryCall("pixesInLand", "pixesInLand(uint256[]):(bool)", [
      ethereum.Value.fromUnsignedBigIntArray(tokenIds)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  relatedDrops(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "relatedDrops",
      "relatedDrops(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_relatedDrops(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "relatedDrops",
      "relatedDrops(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  relatedDropsStatus(param0: BigInt, param1: BigInt): boolean {
    let result = super.call(
      "relatedDropsStatus",
      "relatedDropsStatus(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_relatedDropsStatus(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "relatedDropsStatus",
      "relatedDropsStatus(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  swapManager(): Address {
    let result = super.call("swapManager", "swapManager():(address)", []);

    return result[0].toAddress();
  }

  try_swapManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("swapManager", "swapManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenForPrice(): Address {
    let result = super.call("tokenForPrice", "tokenForPrice():(address)", []);

    return result[0].toAddress();
  }

  try_tokenForPrice(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenForPrice",
      "tokenForPrice():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  traders(param0: Address): boolean {
    let result = super.call("traders", "traders(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_traders(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("traders", "traders(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  treasury(): PIX__treasuryResult {
    let result = super.call("treasury", "treasury():(address,uint256)", []);

    return new PIX__treasuryResult(result[0].toAddress(), result[1].toBigInt());
  }

  try_treasury(): ethereum.CallResult<PIX__treasuryResult> {
    let result = super.tryCall("treasury", "treasury():(address,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PIX__treasuryResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  getTier(tokenId: BigInt): BigInt {
    let result = super.call("getTier", "getTier(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_getTier(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTier", "getTier(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BatchMintCall extends ethereum.Call {
  get inputs(): BatchMintCall__Inputs {
    return new BatchMintCall__Inputs(this);
  }

  get outputs(): BatchMintCall__Outputs {
    return new BatchMintCall__Outputs(this);
  }
}

export class BatchMintCall__Inputs {
  _call: BatchMintCall;

  constructor(call: BatchMintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get infos(): Array<BatchMintCallInfosStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      BatchMintCallInfosStruct
    >();
  }
}

export class BatchMintCall__Outputs {
  _call: BatchMintCall;

  constructor(call: BatchMintCall) {
    this._call = call;
  }
}

export class BatchMintCallInfosStruct extends ethereum.Tuple {
  get pixId(): BigInt {
    return this[0].toBigInt();
  }

  get category(): i32 {
    return this[1].toI32();
  }

  get size(): i32 {
    return this[2].toI32();
  }
}

export class CancelRequestCall extends ethereum.Call {
  get inputs(): CancelRequestCall__Inputs {
    return new CancelRequestCall__Inputs(this);
  }

  get outputs(): CancelRequestCall__Outputs {
    return new CancelRequestCall__Outputs(this);
  }
}

export class CancelRequestCall__Inputs {
  _call: CancelRequestCall;

  constructor(call: CancelRequestCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CancelRequestCall__Outputs {
  _call: CancelRequestCall;

  constructor(call: CancelRequestCall) {
    this._call = call;
  }
}

export class CombineCall extends ethereum.Call {
  get inputs(): CombineCall__Inputs {
    return new CombineCall__Inputs(this);
  }

  get outputs(): CombineCall__Outputs {
    return new CombineCall__Outputs(this);
  }
}

export class CombineCall__Inputs {
  _call: CombineCall;

  constructor(call: CombineCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class CombineCall__Outputs {
  _call: CombineCall;

  constructor(call: CombineCall) {
    this._call = call;
  }
}

export class CompleteRequestCall extends ethereum.Call {
  get inputs(): CompleteRequestCall__Inputs {
    return new CompleteRequestCall__Inputs(this);
  }

  get outputs(): CompleteRequestCall__Outputs {
    return new CompleteRequestCall__Outputs(this);
  }
}

export class CompleteRequestCall__Inputs {
  _call: CompleteRequestCall;

  constructor(call: CompleteRequestCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CompleteRequestCall__Outputs {
  _call: CompleteRequestCall;

  constructor(call: CompleteRequestCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get pixt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenForPrice(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintToCall extends ethereum.Call {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pixIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get categories(): Array<i32> {
    return this._call.inputValues[2].value.toI32Array();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestBatchMintCall extends ethereum.Call {
  get inputs(): RequestBatchMintCall__Inputs {
    return new RequestBatchMintCall__Inputs(this);
  }

  get outputs(): RequestBatchMintCall__Outputs {
    return new RequestBatchMintCall__Outputs(this);
  }
}

export class RequestBatchMintCall__Inputs {
  _call: RequestBatchMintCall;

  constructor(call: RequestBatchMintCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dropId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get playerId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mode(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get count(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RequestBatchMintCall__Outputs {
  _call: RequestBatchMintCall;

  constructor(call: RequestBatchMintCall) {
    this._call = call;
  }
}

export class RequestBatchMintWithIXTCall extends ethereum.Call {
  get inputs(): RequestBatchMintWithIXTCall__Inputs {
    return new RequestBatchMintWithIXTCall__Inputs(this);
  }

  get outputs(): RequestBatchMintWithIXTCall__Outputs {
    return new RequestBatchMintWithIXTCall__Outputs(this);
  }
}

export class RequestBatchMintWithIXTCall__Inputs {
  _call: RequestBatchMintWithIXTCall;

  constructor(call: RequestBatchMintWithIXTCall) {
    this._call = call;
  }

  get dropId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get playerId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get mode(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get count(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RequestBatchMintWithIXTCall__Outputs {
  _call: RequestBatchMintWithIXTCall;

  constructor(call: RequestBatchMintWithIXTCall) {
    this._call = call;
  }
}

export class SafeMintCall extends ethereum.Call {
  get inputs(): SafeMintCall__Inputs {
    return new SafeMintCall__Inputs(this);
  }

  get outputs(): SafeMintCall__Outputs {
    return new SafeMintCall__Outputs(this);
  }
}

export class SafeMintCall__Inputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get info(): SafeMintCallInfoStruct {
    return this._call.inputValues[1].value.toTuple() as SafeMintCallInfoStruct;
  }
}

export class SafeMintCall__Outputs {
  _call: SafeMintCall;

  constructor(call: SafeMintCall) {
    this._call = call;
  }
}

export class SafeMintCallInfoStruct extends ethereum.Tuple {
  get pixId(): BigInt {
    return this[0].toBigInt();
  }

  get category(): i32 {
    return this[1].toI32();
  }

  get size(): i32 {
    return this[2].toI32();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetBlacklistedAddressCall extends ethereum.Call {
  get inputs(): SetBlacklistedAddressCall__Inputs {
    return new SetBlacklistedAddressCall__Inputs(this);
  }

  get outputs(): SetBlacklistedAddressCall__Outputs {
    return new SetBlacklistedAddressCall__Outputs(this);
  }
}

export class SetBlacklistedAddressCall__Inputs {
  _call: SetBlacklistedAddressCall;

  constructor(call: SetBlacklistedAddressCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get blacklisted(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetBlacklistedAddressCall__Outputs {
  _call: SetBlacklistedAddressCall;

  constructor(call: SetBlacklistedAddressCall) {
    this._call = call;
  }
}

export class SetCombinePriceCall extends ethereum.Call {
  get inputs(): SetCombinePriceCall__Inputs {
    return new SetCombinePriceCall__Inputs(this);
  }

  get outputs(): SetCombinePriceCall__Outputs {
    return new SetCombinePriceCall__Outputs(this);
  }
}

export class SetCombinePriceCall__Inputs {
  _call: SetCombinePriceCall;

  constructor(call: SetCombinePriceCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCombinePriceCall__Outputs {
  _call: SetCombinePriceCall;

  constructor(call: SetCombinePriceCall) {
    this._call = call;
  }
}

export class SetDropInfoCall extends ethereum.Call {
  get inputs(): SetDropInfoCall__Inputs {
    return new SetDropInfoCall__Inputs(this);
  }

  get outputs(): SetDropInfoCall__Outputs {
    return new SetDropInfoCall__Outputs(this);
  }
}

export class SetDropInfoCall__Inputs {
  _call: SetDropInfoCall;

  constructor(call: SetDropInfoCall) {
    this._call = call;
  }

  get dropId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get drop(): SetDropInfoCallDropStruct {
    return this._call.inputValues[1].value.toTuple() as SetDropInfoCallDropStruct;
  }
}

export class SetDropInfoCall__Outputs {
  _call: SetDropInfoCall;

  constructor(call: SetDropInfoCall) {
    this._call = call;
  }
}

export class SetDropInfoCallDropStruct extends ethereum.Tuple {
  get maxCount(): BigInt {
    return this[0].toBigInt();
  }

  get requestCount(): BigInt {
    return this[1].toBigInt();
  }

  get limitForPlayer(): BigInt {
    return this[2].toBigInt();
  }

  get startTime(): BigInt {
    return this[3].toBigInt();
  }

  get endTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class SetModeratorCall extends ethereum.Call {
  get inputs(): SetModeratorCall__Inputs {
    return new SetModeratorCall__Inputs(this);
  }

  get outputs(): SetModeratorCall__Outputs {
    return new SetModeratorCall__Outputs(this);
  }
}

export class SetModeratorCall__Inputs {
  _call: SetModeratorCall;

  constructor(call: SetModeratorCall) {
    this._call = call;
  }

  get moderator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetModeratorCall__Outputs {
  _call: SetModeratorCall;

  constructor(call: SetModeratorCall) {
    this._call = call;
  }
}

export class SetOracleManagerCall extends ethereum.Call {
  get inputs(): SetOracleManagerCall__Inputs {
    return new SetOracleManagerCall__Inputs(this);
  }

  get outputs(): SetOracleManagerCall__Outputs {
    return new SetOracleManagerCall__Outputs(this);
  }
}

export class SetOracleManagerCall__Inputs {
  _call: SetOracleManagerCall;

  constructor(call: SetOracleManagerCall) {
    this._call = call;
  }

  get _oracleManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleManagerCall__Outputs {
  _call: SetOracleManagerCall;

  constructor(call: SetOracleManagerCall) {
    this._call = call;
  }
}

export class SetPIXInLandStatusCall extends ethereum.Call {
  get inputs(): SetPIXInLandStatusCall__Inputs {
    return new SetPIXInLandStatusCall__Inputs(this);
  }

  get outputs(): SetPIXInLandStatusCall__Outputs {
    return new SetPIXInLandStatusCall__Outputs(this);
  }
}

export class SetPIXInLandStatusCall__Inputs {
  _call: SetPIXInLandStatusCall;

  constructor(call: SetPIXInLandStatusCall) {
    this._call = call;
  }

  get pixIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetPIXInLandStatusCall__Outputs {
  _call: SetPIXInLandStatusCall;

  constructor(call: SetPIXInLandStatusCall) {
    this._call = call;
  }
}

export class SetPackIXTPriceCall extends ethereum.Call {
  get inputs(): SetPackIXTPriceCall__Inputs {
    return new SetPackIXTPriceCall__Inputs(this);
  }

  get outputs(): SetPackIXTPriceCall__Outputs {
    return new SetPackIXTPriceCall__Outputs(this);
  }
}

export class SetPackIXTPriceCall__Inputs {
  _call: SetPackIXTPriceCall;

  constructor(call: SetPackIXTPriceCall) {
    this._call = call;
  }

  get mode(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPackIXTPriceCall__Outputs {
  _call: SetPackIXTPriceCall;

  constructor(call: SetPackIXTPriceCall) {
    this._call = call;
  }
}

export class SetPackPriceCall extends ethereum.Call {
  get inputs(): SetPackPriceCall__Inputs {
    return new SetPackPriceCall__Inputs(this);
  }

  get outputs(): SetPackPriceCall__Outputs {
    return new SetPackPriceCall__Outputs(this);
  }
}

export class SetPackPriceCall__Inputs {
  _call: SetPackPriceCall;

  constructor(call: SetPackPriceCall) {
    this._call = call;
  }

  get mode(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPackPriceCall__Outputs {
  _call: SetPackPriceCall;

  constructor(call: SetPackPriceCall) {
    this._call = call;
  }
}

export class SetPaymentTokenCall extends ethereum.Call {
  get inputs(): SetPaymentTokenCall__Inputs {
    return new SetPaymentTokenCall__Inputs(this);
  }

  get outputs(): SetPaymentTokenCall__Outputs {
    return new SetPaymentTokenCall__Outputs(this);
  }
}

export class SetPaymentTokenCall__Inputs {
  _call: SetPaymentTokenCall;

  constructor(call: SetPaymentTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetPaymentTokenCall__Outputs {
  _call: SetPaymentTokenCall;

  constructor(call: SetPaymentTokenCall) {
    this._call = call;
  }
}

export class SetRelationForDropsCall extends ethereum.Call {
  get inputs(): SetRelationForDropsCall__Inputs {
    return new SetRelationForDropsCall__Inputs(this);
  }

  get outputs(): SetRelationForDropsCall__Outputs {
    return new SetRelationForDropsCall__Outputs(this);
  }
}

export class SetRelationForDropsCall__Inputs {
  _call: SetRelationForDropsCall;

  constructor(call: SetRelationForDropsCall) {
    this._call = call;
  }

  get drop1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get drop2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetRelationForDropsCall__Outputs {
  _call: SetRelationForDropsCall;

  constructor(call: SetRelationForDropsCall) {
    this._call = call;
  }
}

export class SetSwapManagerCall extends ethereum.Call {
  get inputs(): SetSwapManagerCall__Inputs {
    return new SetSwapManagerCall__Inputs(this);
  }

  get outputs(): SetSwapManagerCall__Outputs {
    return new SetSwapManagerCall__Outputs(this);
  }
}

export class SetSwapManagerCall__Inputs {
  _call: SetSwapManagerCall;

  constructor(call: SetSwapManagerCall) {
    this._call = call;
  }

  get _swapManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSwapManagerCall__Outputs {
  _call: SetSwapManagerCall;

  constructor(call: SetSwapManagerCall) {
    this._call = call;
  }
}

export class SetTokenForPriceCall extends ethereum.Call {
  get inputs(): SetTokenForPriceCall__Inputs {
    return new SetTokenForPriceCall__Inputs(this);
  }

  get outputs(): SetTokenForPriceCall__Outputs {
    return new SetTokenForPriceCall__Outputs(this);
  }
}

export class SetTokenForPriceCall__Inputs {
  _call: SetTokenForPriceCall;

  constructor(call: SetTokenForPriceCall) {
    this._call = call;
  }

  get _tokenForPrice(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenForPriceCall__Outputs {
  _call: SetTokenForPriceCall;

  constructor(call: SetTokenForPriceCall) {
    this._call = call;
  }
}

export class SetTraderCall extends ethereum.Call {
  get inputs(): SetTraderCall__Inputs {
    return new SetTraderCall__Inputs(this);
  }

  get outputs(): SetTraderCall__Outputs {
    return new SetTraderCall__Outputs(this);
  }
}

export class SetTraderCall__Inputs {
  _call: SetTraderCall;

  constructor(call: SetTraderCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetTraderCall__Outputs {
  _call: SetTraderCall;

  constructor(call: SetTraderCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _fee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateTerritoryInfoCall extends ethereum.Call {
  get inputs(): UpdateTerritoryInfoCall__Inputs {
    return new UpdateTerritoryInfoCall__Inputs(this);
  }

  get outputs(): UpdateTerritoryInfoCall__Outputs {
    return new UpdateTerritoryInfoCall__Outputs(this);
  }
}

export class UpdateTerritoryInfoCall__Inputs {
  _call: UpdateTerritoryInfoCall;

  constructor(call: UpdateTerritoryInfoCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get pixId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateTerritoryInfoCall__Outputs {
  _call: UpdateTerritoryInfoCall;

  constructor(call: UpdateTerritoryInfoCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
